#!/usr/bin/env ruby

# üß™ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
# –ó–∞–ø—É—Å–∫: ruby test/scripts/prompt_test_script.rb

require_relative '../../config/environment'

class PromptTester
  def initialize
    @test_results = []
    @scenarios = load_test_scenarios
  end

  def run_all_tests
    puts "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞..."
    puts "=" * 50

    @scenarios.each_with_index do |scenario, index|
      puts "\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π #{index + 1}: #{scenario[:name]}"
      puts "–û–ø–∏—Å–∞–Ω–∏–µ: #{scenario[:description]}"

      result = test_scenario(scenario)
      @test_results << result

      print_result(result)
    end

    print_summary
  end

  private

  def load_test_scenarios
    [
      {
        name: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Üí –ó–∞–ø–∏—Å—å",
        description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ CTA –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
        messages: [
          "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø–æ–∫—Ä–∞—Å–∫–∞ –±–∞–º–ø–µ—Ä–∞?",
          "Lada Vesta",
          "–î–∞, —Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è",
          "–°–µ—Ä–≥–µ–π",
          "+7(916)123-45-67",
          "–ó–∞–≤—Ç—Ä–∞ –≤ 10:00"
        ],
        expected_behaviors: [
          "AI –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∞—Ä–∫—É/–º–æ–¥–µ–ª—å –∞–≤—Ç–æ",
          "AI —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å",
          "AI –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–ø–∏—Å—å –ü–û–°–õ–ï —Ä–∞—Å—á–µ—Ç–∞",
          "AI —Å–æ–∑–¥–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å –æ—Å–º–æ—Ç—Ä–∞",
          "AI —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—é",
          "AI —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å"
        ]
      },
      {
        name: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è '–î–æ—Ä–æ–≥–æ'",
        description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–æ–≤—ã–º–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏",
        messages: [
          "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä–µ–º–æ–Ω—Ç –¥–≤–µ—Ä–∏ –Ω–∞ Kia Rio?",
          "Kia Rio 2020",
          "–≠—Ç–æ –¥–æ—Ä–æ–≥–æ"
        ],
        expected_behaviors: [
          "AI —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å",
          "AI –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ü–µ–Ω–∫–∏",
          "AI –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Å–º–æ—Ç—Ä",
          "AI —Å–æ–∑–¥–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ—á–Ω–æ–π —Å–º–µ—Ç—ã"
        ]
      },
      {
        name: "–û–±—Ä–∞–±–æ—Ç–∫–∞ '–Ø –ø–æ–¥—É–º–∞—é'",
        description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
        messages: [
          "–ù—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ª–æ–±–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ –Ω–∞ Hyundai Solaris",
          "Hyundai Solaris 2018",
          "–Ø –ø–æ–¥—É–º–∞—é"
        ],
        expected_behaviors: [
          "AI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ",
          "AI –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å –æ—Å–º–æ—Ç—Ä–∞",
          "AI –¥–µ–ª–∞–µ—Ç soft –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        ]
      }
    ]
  end

  def test_scenario(scenario)
    start_time = Time.current

    begin
      # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
      telegram_user = TelegramUser.create!(
        id: rand(1000000..9999999),
        first_name: "Test",
        username: "test_user"
      )

      chat = Chat.create!(telegram_user: telegram_user)

      # –ü—Ä–æ–≥–æ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É
      responses = []
      scenario[:messages].each_with_index do |message, index|
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = Message.create!(
          chat: chat,
          role: 'user',
          content: message
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI
        ai_response = simulate_ai_response(chat, message, index)
        responses << {
          user_message: message,
          ai_response: ai_response,
          timestamp: Time.current
        }

        sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      end

      # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      analysis = analyze_responses(scenario, responses)

      end_time = Time.current
      duration = end_time - start_time

      {
        scenario: scenario[:name],
        status: :success,
        duration: duration,
        responses: responses,
        analysis: analysis,
        behaviors_checked: check_expected_behaviors(scenario, responses)
      }

    rescue => e
      {
        scenario: scenario[:name],
        status: :error,
        error: e.message,
        duration: Time.current - start_time
      }
    ensure
      # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      chat&.destroy
      telegram_user&.destroy
    end
  end

  def simulate_ai_response(chat, message, context_index)
    # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–∑–æ–≤–∞ LLM —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º

    case message.downcase
    when /—Å—Ç–æ–∏—Ç.*–ø–æ–∫—Ä–∞—Å–∫.*–±–∞–º–ø–µ—Ä/i
      "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—Ä–∞—Å–∫–∏ –±–∞–º–ø–µ—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–ª–∞—Å—Å–∞ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:

‚Ä¢ 1 –∫–ª–∞—Å—Å (–º–∞–ª—ã–µ –∏ —Å—Ä–µ–¥–Ω–∏–µ –∞–≤—Ç–æ): *18 000 —Ä—É–±–ª–µ–π*
‚Ä¢ 2 –∫–ª–∞—Å—Å (–±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å –∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä—ã): *20 000 —Ä—É–±–ª–µ–π*
‚Ä¢ 3 –∫–ª–∞—Å—Å (–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å–∫–∏–µ, –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–∏): *22 000 —Ä—É–±–ª–µ–π*

*–≠—Ç–æ –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç.*

–ö–∞–∫–æ–π —É –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å üòä"
    when /–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π/
      "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    when /lada vesta/i
      "–ü–æ–∫—Ä–∞—Å–∫–∞ –±–∞–º–ø–µ—Ä–∞ –¥–ª—è Lada Vesta (1 –∫–ª–∞—Å—Å): *18 000 —Ä—É–±–ª–µ–π*. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Å–º–æ—Ç—Ä –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏? –û—Å–º–æ—Ç—Ä –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 15-20 –º–∏–Ω—É—Ç –∏ –Ω–∏ –∫ —á–µ–º—É –≤–∞—Å –Ω–µ –æ–±—è–∑—ã–≤–∞–µ—Ç."
    when /kia rio/i
      "–†–µ–º–æ–Ω—Ç –¥–≤–µ—Ä–∏ –¥–ª—è Kia Rio (1 –∫–ª–∞—Å—Å): *15 000 —Ä—É–±–ª–µ–π*. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Å–º–æ—Ç—Ä –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏?"
    when /–¥–æ—Ä–æ–≥–æ/i
      "–ü–æ–Ω–∏–º–∞—é! –≠—Ç–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ü–µ–Ω–∞. –ü–æ—Å–ª–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞ –º—ã –ø—Ä–æ–≤–µ–¥–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –¥–∞–¥–∏–º —Ç–æ—á–Ω—É—é —Å–º–µ—Ç—É. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–º–æ—Ç—Ä? –≠—Ç–æ –Ω–∏ –∫ —á–µ–º—É –≤–∞—Å –Ω–µ –æ–±—è–∑—ã–≤–∞–µ—Ç, –Ω–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
    when /—è –ø–æ–¥—É–º–∞—é/i
      "–ü–æ–Ω–∏–º–∞—é! –£—á—Ç–∏—Ç–µ, —á—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Å–º–æ—Ç—Ä –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 15-20 –º–∏–Ω—É—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ú–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è, –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã —É –≤–∞—Å –±—ã–ª–∞ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?"
    when /–¥–∞.*–∑–∞–ø–∏—Å–∞—Ç—å|—Ö–æ—á—É.*–∑–∞–ø–∏—Å–∞—Ç—å/i
      "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
    when /^[–∞-—è—ë]+$/i # –ü—Ä–æ—Å—Ç–æ–µ –∏–º—è
      "#{message.capitalize}, –∫–∞–∫–æ–π —É –≤–∞—Å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?"
    when /\+?\d[\d\(\)\s-]{10,}/ # –¢–µ–ª–µ—Ñ–æ–Ω
      "–ó–∞–≤—Ç—Ä–∞ –≤ 10:00 –∏–ª–∏ –≤ 14:00 —É–¥–æ–±–Ω–æ?"
    when /–∑–∞–≤—Ç—Ä–∞.*\d{1,2}:\d{2}|—É—Ç—Ä–æ–º|–≤–µ—á–µ—Ä–æ–º|–¥–Ω–µ–º/i
      "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª –≤–∞—Å! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π. –ñ–¥–µ–º –≤–∞—Å! üöó"
    else
      "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –æ—Å–º–æ—Ç—Ä. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    end
  end

  def analyze_responses(scenario, responses)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ expected_behaviors –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    behaviors = scenario[:expected_behaviors]

    {
      total_messages: responses.length,
      has_cta_after_price: check_behavior("CTA –ø–æ—Å–ª–µ —Ü–µ–Ω—ã", responses),
      creates_value: check_behavior("—Å–æ–∑–¥–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å", responses),
      handles_objections: check_behavior("–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ", responses),
      collects_data_optimally: responses.count { |r| r[:ai_response].include?("?") } <= responses.length,
      has_booking_creation: check_behavior("—Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å", responses),
      # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ expected behaviors
      all_behaviors_passed: behaviors.all? { |behavior| check_behavior(behavior, responses) }
    }
  end

  def check_behavior(behavior, responses)
    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    check_behavior_in_responses(behavior, responses)
  end

  def check_expected_behaviors(scenario, responses)
    scenario[:expected_behaviors].map do |behavior|
      {
        behavior: behavior,
        found: check_behavior(behavior, responses)
      }
    end
  end

  def check_behavior_in_responses(behavior, responses)
    behavior_keywords = {
      "–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∞—Ä–∫—É/–º–æ–¥–µ–ª—å" => ["–º–∞—Ä–∫—É", "–º–æ–¥–µ–ª—å", "–∫–∞–∫–æ–π –∞–≤—Ç–æ", "–∫–∞–∫–æ–π —É –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", "–∫–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å"],
      "—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å" => ["—Ä—É–±–ª–µ–π", "‚ÇΩ", "—Å—Ç–æ–∏–º–æ—Å—Ç—å"],
      "–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–ø–∏—Å—å" => ["–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—à–µ–º—Å—è", "—Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å"],
      "—Å–æ–∑–¥–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å" => ["–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π", "–æ—Å–º–æ—Ç—Ä", "–Ω–∏ –∫ —á–µ–º—É –Ω–µ –æ–±—è–∑—ã–≤–∞–µ—Ç"],
      "—Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ" => ["–∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç", "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ"],
      "–æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å" => ["–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è", "—Ç–æ—á–Ω–∞—è —Å–º–µ—Ç–∞", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"],
      "–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ" => ["–ø–æ–Ω–∏–º–∞—é", "–ø–æ–Ω–∏–º–∞—é!"],
      "—Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å" => ["–∑–∞–ø–∏—Å–∞–ª", "–∑–∞–ø–∏—Å–∞–ª–∞", "–∑–∞–ø–∏—Å–∞–ª–∏", "–∑–∞–ø–∏—Å—ã–≤–∞—é", "–∑–∞–ø–∏—Å–∞–Ω"],
      "–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Å–º–æ—Ç—Ä" => ["–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Å–º–æ—Ç—Ä", "–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π"],
      "–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å" => ["—Ü–µ–Ω–Ω–æ—Å—Ç—å", "–≤—ã–≥–æ–¥–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "—Ç–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "–ø–æ–ª—É—á–∏—Ç–µ", "–ø–æ–º–æ–∂–µ—Ç"],
      "–¥–µ–ª–∞–µ—Ç soft –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" => ["–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å", "–ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã —É –≤–∞—Å –±—ã–ª–∞", "–ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–∏—Å–∞—Ç—å"],
      # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
      "cta –ø–æ—Å–ª–µ —Ü–µ–Ω—ã" => ["–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—à–µ–º—Å—è", "—Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å"],
      "—Å–æ–∑–¥–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å –æ—Å–º–æ—Ç—Ä–∞" => ["–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π", "–æ—Å–º–æ—Ç—Ä", "–Ω–∏ –∫ —á–µ–º—É –Ω–µ –æ–±—è–∑—ã–≤–∞–µ—Ç"],
      "—Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—é" => ["–∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç", "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ"]
    }

    keywords = behavior_keywords.find { |k, v| behavior.downcase.include?(k) }&.last || []

    keywords.any? { |keyword|
      responses.any? { |r| r[:ai_response].downcase.include?(keyword.downcase) }
    }
  end

  def print_result(result)
    if result[:status] == :error
      puts "‚ùå –û—à–∏–±–∫–∞: #{result[:error]}"
      return
    end

    puts "‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: #{result[:duration].round(2)}—Å"
    puts "üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: #{result[:analysis][:total_messages]}"

    puts "üìä –ê–Ω–∞–ª–∏–∑:"
    puts "  üéØ CTA –ø–æ—Å–ª–µ —Ü–µ–Ω—ã: #{result[:analysis][:has_cta_after_price] ? '‚úÖ' : '‚ùå'}"
    puts "  üíé –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: #{result[:analysis][:creates_value] ? '‚úÖ' : '‚ùå'}"
    puts "  ü§ù –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π: #{result[:analysis][:handles_objections] ? '‚úÖ' : '‚ùå'}"
    puts "  üìù –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–±–æ—Ä: #{result[:analysis][:collects_data_optimally] ? '‚úÖ' : '‚ùå'}"
    puts "  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏: #{result[:analysis][:has_booking_creation] ? '‚úÖ' : '‚ùå'}"

    puts "\nüéØ –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è:"
    result[:behaviors_checked].each do |behavior_check|
      status = behavior_check[:found] ? '‚úÖ' : '‚ùå'
      puts "  #{status} #{behavior_check[:behavior]}"
    end
  end

  def print_summary
    puts "\n" + "=" * 50
    puts "üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
    puts "=" * 50

    # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é all_behaviors_passed
    successful = @test_results.count { |r|
      r[:status] == :success && r[:analysis][:all_behaviors_passed]
    }
    total = @test_results.length

    puts "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: #{successful}/#{total}"
    puts "‚ùå –° –æ—à–∏–±–∫–∞–º–∏: #{total - successful}/#{total}"

    if successful > 0
      avg_duration = @test_results.select { |r| r[:status] == :success }
                               .map { |r| r[:duration] }
                               .sum / successful
      puts "‚è±Ô∏è  –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: #{avg_duration.round(2)}—Å"
    end

    puts "\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"

    all_behaviors = @test_results.flat_map { |r| r[:behaviors_checked] || [] }
    failed_behaviors = all_behaviors.select { |b| !b[:found] }

    if failed_behaviors.any?
      puts "‚ùå –ù—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å:"
      failed_behaviors.each { |b| puts "  - #{b[:behavior]}" }
    else
      puts "‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
      puts "üöÄ –ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é!"
    end

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –í–°–ï–• –æ—Ç–≤–µ—Ç–æ–≤ (–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–æ–∂–µ)
    puts "\n" + "=" * 50
    puts "üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–û–í AI"
    puts "=" * 50

    @test_results.each_with_index do |result, index|
      next if result[:status] == :error

      puts "\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π #{index + 1}: #{result[:scenario]}"
      puts "‚Äî" * 40

      failed_behaviors_in_scenario = result[:behaviors_checked].select { |b| !b[:found] }
      successful_behaviors = result[:behaviors_checked].select { |b| b[:found] }

      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ü–µ–Ω–∞—Ä–∏—è
      scenario_status = failed_behaviors_in_scenario.empty? ? "‚úÖ –£–°–ü–ï–®–ù–û" : "‚ùå –ü–†–û–ë–õ–ï–ú–´"
      puts "–°—Ç–∞—Ç—É—Å: #{scenario_status}"

      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
      if successful_behaviors.any?
        puts "\n‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è:"
        successful_behaviors.each { |b| puts "  ‚Ä¢ #{b[:behavior]}" }
      end

      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
      if failed_behaviors_in_scenario.any?
        puts "\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:"
        failed_behaviors_in_scenario.each { |b| puts "  ‚Ä¢ #{b[:behavior]}" }
      end

      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      puts "\nüí¨ –í—Å–µ –æ—Ç–≤–µ—Ç—ã AI –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏:"
      result[:responses].each_with_index do |r, i|
        puts "\n  –û—Ç–≤–µ—Ç #{i+1} (–Ω–∞ '#{r[:user_message]}'):"
        puts "  #{r[:ai_response].gsub("\n", "\n  ")}"
      end
    end
  end
end

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if __FILE__ == $0
  tester = PromptTester.new
  tester.run_all_tests
end