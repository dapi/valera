#!/usr/bin/env ruby

require 'telegram/bot'
require 'json'
require 'fileutils'

# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä Telegram –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–∞–π–ª–æ–≤, —Å–æ—Å—Ç–æ—è–Ω–∏–π, –∏ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
class AdvancedBot
  def initialize(token)
    @bot = Telegram::Bot::Client.new(token)
    @user_states = {}
    @user_data = {}
    @data_dir = File.join(__dir__, '..', 'data')
    FileUtils.mkdir_p(@data_dir)
    load_user_data
  end

  def start
    puts "Starting advanced bot with file handling and state management..."

    @bot.listen do |message|
      begin
        handle_message(message)
        save_user_data
      rescue => e
        puts "Error handling message: #{e.message}"
        puts e.backtrace.first(5)
        send_error_message(message.chat.id)
      end
    end
  end

  private

  def handle_message(message)
    user_id = message.from.id
    init_user_data(user_id)

    case message
    when Telegram::Bot::Types::CallbackQuery
      handle_callback_query(message)
    when Telegram::Bot::Types::Message
      handle_regular_message(message)
    end
  end

  def handle_regular_message(message)
    user_id = message.from.id
    state = @user_states[user_id]

    case state[:state]
    when :waiting_for_name
      handle_name_input(message, user_id)
    when :waiting_for_age
      handle_age_input(message, user_id)
    when :waiting_for_file
      handle_file_input(message, user_id)
    when :waiting_for_location
      handle_location_input(message, user_id)
    else
      handle_command_message(message)
    end
  end

  def handle_command_message(message)
    user_id = message.from.id

    case message.text
    when '/start'
      handle_start(message)
    when '/register'
      start_registration(message, user_id)
    when '/profile'
      show_profile(message, user_id)
    when '/upload'
      request_file_upload(message, user_id)
    when '/location'
      request_location(message, user_id)
    when '/gallery'
      show_gallery(message, user_id)
    when '/cancel'
      cancel_current_action(message, user_id)
    when '/stats'
      show_statistics(message)
    else
      handle_text_input(message, user_id)
    end
  end

  def handle_start(message)
    inline_keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
      inline_keyboard: [
        [
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
            callback_data: 'register'
          ),
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
            callback_data: 'profile'
          )
        ],
        [
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: 'üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª',
            callback_data: 'upload'
          ),
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é',
            callback_data: 'location'
          )
        ]
      ]
    )

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞!\n\n" \
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n" \
            "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" \
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n" \
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n" \
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≥–∞–ª–µ—Ä–µ–∏\n" \
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n" \
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      reply_markup: inline_keyboard
    )
  end

  def start_registration(message, user_id)
    @user_states[user_id][:state] = :waiting_for_name
    @user_states[user_id][:registration_data] = {}

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: "üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n" \
            "–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
  end

  def handle_name_input(message, user_id)
    name = message.text.strip
    if name.length < 2
      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
      )
      return
    end

    @user_states[user_id][:registration_data][:name] = name
    @user_states[user_id][:state] = :waiting_for_age

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: "‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: #{name}\n\n" \
            "–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ü–∏—Ñ—Ä–∞–º–∏):"
    )
  end

  def handle_age_input(message, user_id)
    age = message.text.strip.to_i
    if age < 1 || age > 120
      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120:"
      )
      return
    end

    @user_states[user_id][:registration_data][:age] = age
    complete_registration(message, user_id)
  end

  def complete_registration(message, user_id)
    registration_data = @user_states[user_id][:registration_data]
    @user_data[user_id].merge!(registration_data)
    @user_states[user_id][:state] = :idle

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n" \
            "üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n" \
            "–ò–º—è: #{@user_data[user_id][:name]}\n" \
            "–í–æ–∑—Ä–∞—Å—Ç: #{@user_data[user_id][:age]}\n" \
            "ID: #{user_id}\n\n" \
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
    )
  end

  def show_profile(message, user_id)
    user_profile = @user_data[user_id]

    if user_profile.empty?
      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "üìù –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
      )
      return
    end

    profile_text = "üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**\n\n"
    profile_text += "üÜî ID: #{user_id}\n"
    profile_text += "üë§ –ò–º—è: #{user_profile[:name]}\n" if user_profile[:name]
    profile_text += "üéÇ –í–æ–∑—Ä–∞—Å—Ç: #{user_profile[:age]}\n" if user_profile[:age]
    profile_text += "üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: #{user_profile[:files]&.size || 0}\n"
    profile_text += "üìç –õ–æ–∫–∞—Ü–∏–π: #{user_profile[:locations]&.size || 0}\n"
    profile_text += "üìä –°–æ–æ–±—â–µ–Ω–∏–π: #{user_profile[:message_count] || 0}"

    if user_profile[:last_location]
      loc = user_profile[:last_location]
      profile_text += "\n\nüìç –ü–æ—Å–ª–µ–¥–Ω—è—è –ª–æ–∫–∞—Ü–∏—è: #{loc[:latitude]}, #{loc[:longitude]}"
    end

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: profile_text,
      parse_mode: 'Markdown'
    )
  end

  def request_file_upload(message, user_id)
    @user_states[user_id][:state] = :waiting_for_file

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: "üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ).\n\n" \
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n" \
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC, TXT –∏ –¥—Ä.)\n" \
            "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (JPG, PNG, GIF)\n" \
            "‚Ä¢ –í–∏–¥–µ–æ (MP4, AVI)\n" \
            "‚Ä¢ –ê—É–¥–∏–æ (MP3, WAV)\n\n" \
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
  end

  def handle_file_input(message, user_id)
    file_info = nil
    file_type = nil
    caption = message.caption

    if message.photo
      file_info = message.photo.last
      file_type = 'photo'
    elsif message.document
      file_info = message.document
      file_type = 'document'
    elsif message.video
      file_info = message.video
      file_type = 'video'
    elsif message.audio
      file_info = message.audio
      file_type = 'audio'
    elsif message.voice
      file_info = message.voice
      file_type = 'voice'
    else
      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "‚ùå –§–∞–π–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª."
      )
      return
    end

    begin
      # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      file_record = {
        file_id: file_info.file_id,
        file_name: file_info.file_name || "file_#{Time.now.to_i}",
        file_size: file_info.file_size,
        file_type: file_type,
        caption: caption,
        uploaded_at: Time.now.iso8601
      }

      @user_data[user_id][:files] ||= []
      @user_data[user_id][:files] << file_record

      # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      download_file(file_info, user_id) if should_download_file?(file_info)

      @user_states[user_id][:state] = :idle

      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n" \
              "üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" \
              "–¢–∏–ø: #{file_type}\n" \
              "–ò–º—è: #{file_record[:file_name]}\n" \
              "–†–∞–∑–º–µ—Ä: #{format_file_size(file_info.file_size)}\n" \
              "–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: #{@user_data[user_id][:files].size}"
      )
    rescue => e
      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: #{e.message}"
      )
    end
  end

  def request_location(message, user_id)
    @user_states[user_id][:state] = :waiting_for_location

    location_keyboard = Telegram::Bot::Types::ReplyKeyboardMarkup.new(
      keyboard: [
        [Telegram::Bot::Types::KeyboardButton.new(text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', request_location: true)]
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    )

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.\n\n" \
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.\n\n" \
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
      reply_markup: location_keyboard
    )
  end

  def handle_location_input(message, user_id)
    unless message.location
      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      )
      return
    end

    location = message.location
    location_record = {
      latitude: location.latitude,
      longitude: location.longitude,
      timestamp: Time.now.iso8601
    }

    @user_data[user_id][:locations] ||= []
    @user_data[user_id][:locations] << location_record
    @user_data[user_id][:last_location] = location_record
    @user_states[user_id][:state] = :idle

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ª–æ–∫–∞—Ü–∏–∏
    hide_keyboard = Telegram::Bot::Types::ReplyKeyboardRemove.new

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: "‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n" \
            "üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: #{location.latitude}, #{location.longitude}\n" \
            "[–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](https://www.google.com/maps?q=#{location.latitude},#{location.longitude})\n\n" \
            "–í—Å–µ–≥–æ –ª–æ–∫–∞—Ü–∏–π: #{@user_data[user_id][:locations].size}",
      parse_mode: 'Markdown',
      reply_markup: hide_keyboard
    )
  end

  def show_gallery(message, user_id)
    files = @user_data[user_id][:files] || []

    if files.empty?
      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "üìÅ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.\n\n" \
              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤."
      )
      return
    end

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∞–π–ª–∞–º–∏
    keyboard_buttons = files.map.with_index do |file, index|
      Telegram::Bot::Types::InlineKeyboardButton.new(
        text: "#{index + 1}. #{file[:file_name]} (#{file[:file_type]})",
        callback_data: "file_#{index}"
      )
    end

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
    keyboard_rows = keyboard_buttons.each_slice(2).to_a

    inline_keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
      inline_keyboard: keyboard_rows
    )

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: "üìÅ –í–∞—à–∞ –≥–∞–ª–µ—Ä–µ—è (#{files.size} —Ñ–∞–π–ª–æ–≤):\n\n" \
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
      reply_markup: inline_keyboard
    )
  end

  def cancel_current_action(message, user_id)
    @user_states[user_id][:state] = :idle
    hide_keyboard = Telegram::Bot::Types::ReplyKeyboardRemove.new

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
      reply_markup: hide_keyboard
    )
  end

  def show_statistics(message)
    total_users = @user_data.size
    total_files = @user_data.values.sum { |data| data[:files]&.size || 0 }
    total_locations = @user_data.values.sum { |data| data[:locations]&.size || 0 }
    total_messages = @user_data.values.sum { |data| data[:message_count] || 0 }

    stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n\n"
    stats_text += "üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: #{total_users}\n"
    stats_text += "üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: #{total_files}\n"
    stats_text += "üìç –í—Å–µ–≥–æ –ª–æ–∫–∞—Ü–∏–π: #{total_locations}\n"
    stats_text += "üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: #{total_messages}\n"
    stats_text += "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: #{format_uptime(Time.now - @start_time)}"

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: stats_text,
      parse_mode: 'Markdown'
    )
  end

  def handle_callback_query(callback_query)
    user_id = callback_query.from.id
    data = callback_query.data

    case data
    when 'register'
      start_registration(callback_query.message, user_id)
    when 'profile'
      show_profile(callback_query.message, user_id)
    when 'upload'
      request_file_upload(callback_query.message, user_id)
    when 'location'
      request_location(callback_query.message, user_id)
    when /^file_(\d+)$/
      file_index = $1.to_i
      show_file_details(callback_query.message, user_id, file_index)
    end

    @bot.api.answer_callback_query(callback_query_id: callback_query.id)
  end

  def show_file_details(message, user_id, file_index)
    files = @user_data[user_id][:files] || []
    return if file_index >= files.size

    file = files[file_index]

    details_text = "üìÅ **–î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞:**\n\n"
    details_text += "üìÑ –ò–º—è: #{file[:file_name]}\n"
    details_text += "üè∑Ô∏è –¢–∏–ø: #{file[:file_type]}\n"
    details_text += "üìè –†–∞–∑–º–µ—Ä: #{format_file_size(file[:file_size])}\n"
    details_text += "üìù –û–ø–∏—Å–∞–Ω–∏–µ: #{file[:caption] || '–ù–µ—Ç'}\n"
    details_text += "üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: #{format_time(file[:uploaded_at])}"

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: details_text,
      parse_mode: 'Markdown'
    )
  end

  def handle_text_input(message, user_id)
    @user_data[user_id][:message_count] = (@user_data[user_id][:message_count] || 0) + 1

    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
    case message.text.downcase
    when '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π'
      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥."
      )
    when '–ø–æ–º–æ—â—å', 'help'
      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "üÜò **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n" \
              "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" \
              "/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n" \
              "/profile - –ø—Ä–æ—Ñ–∏–ª—å\n" \
              "/upload - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª\n" \
              "/location - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é\n" \
              "/gallery - –≥–∞–ª–µ—Ä–µ—è —Ñ–∞–π–ª–æ–≤\n" \
              "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" \
              "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
        parse_mode: 'Markdown'
      )
    else
      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
      )
    end
  end

  def init_user_data(user_id)
    @user_states[user_id] ||= { state: :idle }
    @user_data[user_id] ||= {
      message_count: 0,
      files: [],
      locations: []
    }
  end

  def should_download_file?(file_info)
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –º–µ–Ω—å—à–µ 5MB
    file_info.file_size && file_info.file_size < 5 * 1024 * 1024
  end

  def download_file(file_info, user_id)
    begin
      file = @bot.api.get_file(file_id: file_info.file_id)
      file_url = "https://api.telegram.org/file/bot#{ENV['TELEGRAM_BOT_TOKEN']}/#{file.file_path}"

      # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user_dir = File.join(@data_dir, "user_#{user_id}")
      FileUtils.mkdir_p(user_dir)

      # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      require 'open-uri'
      file_path = File.join(user_dir, file_info.file_name || "file_#{file_info.file_id}")
      File.open(file_path, 'wb') { |f| f.write(open(file_url).read) }

      puts "File downloaded: #{file_path}"
    rescue => e
      puts "Error downloading file: #{e.message}"
    end
  end

  def save_user_data
    File.write(File.join(@data_dir, 'user_data.json'), @user_data.to_json)
  end

  def load_user_data
    data_file = File.join(@data_dir, 'user_data.json')
    if File.exist?(data_file)
      @user_data = JSON.parse(File.read(data_file), symbolize_names: true)
    end
    @start_time = Time.now
  end

  def format_file_size(bytes)
    return '0 B' if bytes.nil? || bytes.zero?

    units = %w[B KB MB GB]
    size = bytes.to_f
    unit_index = 0

    while size >= 1024 && unit_index < units.length - 1
      size /= 1024
      unit_index += 1
    end

    "#{size.round(2)} #{units[unit_index]}"
  end

  def format_time(iso_time)
    Time.parse(iso_time).strftime('%d.%m.%Y %H:%M:%S')
  rescue
    '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  end

  def format_uptime(seconds)
    hours = (seconds / 3600).to_i
    minutes = ((seconds % 3600) / 60).to_i
    "#{hours}—á #{minutes}–º"
  end

  def send_error_message(chat_id)
    @bot.api.send_message(
      chat_id: chat_id,
      text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
    )
  rescue
    puts "Failed to send error message to chat #{chat_id}"
  end
end

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __FILE__ == $0
  token = ENV['TELEGRAM_BOT_TOKEN'] || ARGV[0]

  unless token
    puts "Usage: #{$0} <BOT_TOKEN>"
    puts "Or set TELEGRAM_BOT_TOKEN environment variable"
    exit 1
  end

  bot = AdvancedBot.new(token)
  bot.start
end