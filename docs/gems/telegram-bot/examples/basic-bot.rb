#!/usr/bin/env ruby

require 'telegram/bot'

# –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä Telegram –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥
class BasicBot
  def initialize(token)
    @bot = Telegram::Bot::Client.new(token)
  end

  def start
    puts "Starting bot..."

    @bot.listen do |message|
      handle_message(message)
    end
  rescue Telegram::Bot::Exceptions::ResponseError => e
    puts "Error: #{e.description}"
    sleep 5
    retry
  end

  private

  def handle_message(message)
    case message.text
    when '/start'
      handle_start(message)
    when '/help'
      handle_help(message)
    when '/info'
      handle_info(message)
    when '/keyboard'
      handle_keyboard(message)
    when '/inline'
      handle_inline(message)
    else
      handle_unknown(message)
    end
  rescue => e
    puts "Error handling message: #{e.message}"
    send_error_message(message.chat.id)
  end

  def handle_start(message)
    @bot.api.send_message(
      chat_id: message.chat.id,
      text: "–ü—Ä–∏–≤–µ—Ç, #{message.from.first_name}! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. üëã\n\n" \
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
            "/help - —Å–ø—Ä–∞–≤–∫–∞\n" \
            "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n" \
            "/keyboard - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n" \
            "/inline - –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"
    )
  end

  def handle_help(message)
    help_text = <<~HELP
      *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

      `/start` - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
      `/info` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
      `/keyboard` - –ø–æ–∫–∞–∑–∞—Ç—å Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      `/inline` - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏

      *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
      ‚Ä¢ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
      ‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç –∫–Ω–æ–ø–æ–∫
    HELP

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: help_text,
      parse_mode: 'Markdown'
    )
  end

  def handle_info(message)
    bot_info = @bot.api.get_me

    info_text = <<~INFO
      *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:*

      –ò–º—è: #{bot_info.first_name}
      Username: @#{bot_info.username}
      ID: #{bot_info.id}

      *–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
      –ò–º—è: #{message.from.first_name}
      Username: #{message.from.username}
      ID: #{message.from.id}

      *–ß–∞—Ç:*
      –¢–∏–ø: #{message.chat.type}
      ID: #{message.chat.id}
    INFO

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: info_text,
      parse_mode: 'Markdown'
    )
  end

  def handle_keyboard(message)
    keyboard = Telegram::Bot::Types::ReplyKeyboardMarkup.new(
      keyboard: [
        ['üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
        ['‚å®Ô∏è –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    )

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      reply_markup: keyboard
    )
  end

  def handle_inline(message)
    inline_keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
      inline_keyboard: [
        [
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: 'üîç Google',
            url: 'https://google.com'
          ),
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: 'üí¨ Callback',
            callback_data: 'callback_test'
          )
        ],
        [
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
            switch_inline_query: 'share this'
          )
        ]
      ]
    )

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: '–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏:',
      reply_markup: inline_keyboard
    )
  end

  def handle_unknown(message)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —ç—Ç–æ callback –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    if message.is_a?(Telegram::Bot::Types::CallbackQuery)
      handle_callback(message)
    elsif message.text&.include?('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')
      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç, #{message.from.first_name}! üëã"
      )
    elsif message.text&.include?('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
      handle_info(message)
    elsif message.text&.include?('–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')
      hide_keyboard(message)
    else
      @bot.api.send_message(
        chat_id: message.chat.id,
        text: "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É '#{message.text}'.\n" \
              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
      )
    end
  end

  def handle_callback(callback_query)
    case callback_query.data
    when 'callback_test'
      @bot.api.answer_callback_query(
        callback_query_id: callback_query.id,
        text: 'Callback –ø–æ–ª—É—á–µ–Ω! ‚úÖ',
        show_alert: true
      )

      @bot.api.edit_message_text(
        chat_id: callback_query.message.chat.id,
        message_id: callback_query.message.message_id,
        text: "Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n–î–∞–Ω–Ω—ã–µ: #{callback_query.data}",
        reply_markup: callback_query.message.reply_markup
      )
    end
  end

  def hide_keyboard(message)
    hide_keyboard = Telegram::Bot::Types::ReplyKeyboardRemove.new

    @bot.api.send_message(
      chat_id: message.chat.id,
      text: '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞',
      reply_markup: hide_keyboard
    )
  end

  def send_error_message(chat_id)
    @bot.api.send_message(
      chat_id: chat_id,
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
    )
  rescue
    # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—à–∏–±–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    puts "Failed to send error message to chat #{chat_id}"
  end
end

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __FILE__ == $0
  token = ENV['TELEGRAM_BOT_TOKEN'] || ARGV[0]

  unless token
    puts "Usage: #{$0} <BOT_TOKEN>"
    puts "Or set TELEGRAM_BOT_TOKEN environment variable"
    exit 1
  end

  bot = BasicBot.new(token)
  bot.start
end