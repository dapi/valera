#!/usr/bin/env ruby

require 'ruby_llm'
require 'json'
require 'net/http'
require 'uri'
require 'dotenv/load'

# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Ruby LLM —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (function calling)
class ToolCallingBot
  def initialize(model = 'gpt-4')
    configure_llm
    @model = model
    @tools = define_tools
    @chat = create_chat_with_tools
  end

  def start
    puts "ü§ñ Tool Calling Bot –∑–∞–ø—É—â–µ–Ω!"
    puts "–ú–æ–¥–µ–ª—å: #{@model}"
    puts "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: #{@tools.map { |t| t[:name] }.join(', ')}"
    puts "–ö–æ–º–∞–Ω–¥—ã: /help, /exit"
    puts "-" * 50

    loop do
      print "> "
      input = gets.chomp

      case input
      when '/exit'
        puts "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        break
      when '/help'
        show_help
      when '/tools'
        show_available_tools
      when empty?
        next
      else
        process_message_with_tools(input)
      end
    end
  end

  private

  def configure_llm
    RubyLLM.configure do |config|
      config.use_new_acts_as = true
      config.request_timeout = 120
      config.max_retries = 2
      config.openai_api_key = ENV['OPENAI_API_KEY']
      config.anthropic_api_key = ENV['ANTHROPIC_API_KEY']
      config.default_model = @model
    end
  end

  def define_tools
    [
      {
        name: 'get_weather',
        description: '–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞',
        parameters: {
          type: 'object',
          properties: {
            city: {
              type: 'string',
              description: '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ'
            },
            units: {
              type: 'string',
              enum: ['celsius', 'fahrenheit'],
              description: '–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã',
              default: 'celsius'
            }
          },
          required: ['city']
        }
      },
      {
        name: 'calculate',
        description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è',
        parameters: {
          type: 'object',
          properties: {
            expression: {
              type: 'string',
              description: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2 + 2 * 3")'
            }
          },
          required: ['expression']
        }
      },
      {
        name: 'search_web',
        description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (—Å–∏–º—É–ª—è—Ü–∏—è)',
        parameters: {
          type: 'object',
          properties: {
            query: {
              type: 'string',
              description: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
            },
            num_results: {
              type: 'integer',
              description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
              default: 5
            }
          },
          required: ['query']
        }
      },
      {
        name: 'get_current_time',
        description: '–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞',
        parameters: {
          type: 'object',
          properties: {
            city: {
              type: 'string',
              description: '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ú–æ—Å–∫–≤–∞", "New York")'
            },
            timezone: {
              type: 'string',
              description: '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "Europe/Moscow", "America/New_York")'
            }
          },
          required: []
        }
      },
      {
        name: 'translate_text',
        description: '–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π',
        parameters: {
          type: 'object',
          properties: {
            text: {
              type: 'string',
              description: '–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞'
            },
            from_lang: {
              type: 'string',
              description: '–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "ru", "en")'
            },
            to_lang: {
              type: 'string',
              description: '–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "en", "ru")'
            }
          },
          required: ['text', 'to_lang']
        }
      }
    ]
  end

  def create_chat_with_tools
    RubyLLM.chat.new(
      model: @model,
      system: "–¢—ã - —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º. " \
              "–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. " \
              "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ.",
      tools: @tools
    )
  end

  def process_message_with_tools(message)
    begin
      print "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å... "

      response = @chat.say(message)
      puts "\n"

      # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤—ã–∑–≤–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      if response.tool_calls.any?
        handle_tool_calls(response)
      else
        puts "ü§ñ #{response.content}"
      end

      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
      if response.usage
        tokens = response.usage[:total_tokens]
        puts "üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: #{tokens}"
      end

      puts
    rescue RubyLLM::AuthenticationError => e
      puts "\n‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: #{e.message}"
    rescue RubyLLM::RateLimitError => e
      puts "\n‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ #{e.retry_after} —Å–µ–∫—É–Ω–¥"
      sleep(e.retry_after || 5)
      retry
    rescue => e
      puts "\n‚ùå –û—à–∏–±–∫–∞: #{e.message}"
    end
  end

  def handle_tool_calls(response)
    puts "üîß –í—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: #{response.tool_calls.map(&:name).join(', ')}"
    puts

    response.tool_calls.each do |tool_call|
      handle_single_tool_call(tool_call)
    end
  end

  def handle_single_tool_call(tool_call)
    tool_name = tool_call.name
    arguments = JSON.parse(tool_call.arguments)

    puts "üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: #{tool_name}"
    puts "üìã –ê—Ä–≥—É–º–µ–Ω—Ç—ã: #{arguments}"
    print "‚ö° –í—ã–ø–æ–ª–Ω—è—é... "

    begin
      result = execute_tool(tool_name, arguments)
      puts "‚úÖ –ì–æ—Ç–æ–≤–æ"
      puts "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: #{result}"

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç
      tool_response = @chat.say(
        tool_result: {
          tool_call_id: tool_call.id,
          result: result
        }
      )

      puts "ü§ñ #{tool_response.content}"
    rescue => e
      puts "‚ùå –û—à–∏–±–∫–∞: #{e.message}"

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      @chat.say(
        tool_result: {
          tool_call_id: tool_call.id,
          error: e.message
        }
      )
    end

    puts
  end

  def execute_tool(tool_name, arguments)
    case tool_name
    when 'get_weather'
      get_weather(arguments['city'], arguments['units'])
    when 'calculate'
      calculate_expression(arguments['expression'])
    when 'search_web'
      search_web(arguments['query'], arguments['num_results'])
    when 'get_current_time'
      get_current_time(arguments['city'], arguments['timezone'])
    when 'translate_text'
      translate_text(arguments['text'], arguments['from_lang'], arguments['to_lang'])
    else
      raise "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: #{tool_name}"
    end
  end

  def get_weather(city, units = 'celsius')
    # –°–∏–º—É–ª—è—Ü–∏—è API –ø–æ–≥–æ–¥—ã
    weather_data = {
      '–ú–æ—Å–∫–≤–∞' => { temp: 15, condition: '–û–±–ª–∞—á–Ω–æ', humidity: 65 },
      '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' => { temp: 12, condition: '–î–æ–∂–¥—å', humidity: 80 },
      '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' => { temp: 8, condition: '–°–æ–ª–Ω–µ—á–Ω–æ', humidity: 45 },
      'London' => { temp: 18, condition: '–¢—É–º–∞–Ω–Ω–æ', humidity: 70 },
      'New York' => { temp: 22, condition: '–Ø—Å–Ω–æ', humidity: 55 },
      'Tokyo' => { temp: 25, condition: '–û–±–ª–∞—á–Ω–æ', humidity: 60 }
    }

    data = weather_data[city] || { temp: 20, condition: '–Ø—Å–Ω–æ', humidity: 50 }
    temp = units == 'fahrenheit' ? (data[:temp] * 9/5 + 32).round(1) : data[:temp]
    unit = units == 'fahrenheit' ? '¬∞F' : '¬∞C'

    "–í –≥–æ—Ä–æ–¥–µ #{city}: #{temp}#{unit}, #{data[:condition]}, –≤–ª–∞–∂–Ω–æ—Å—Ç—å #{data[:humidity]}%"
  end

  def calculate_expression(expression)
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —á–∏—Å–ª–∞
    unless expression.match(/^[\d\+\-\*\/\(\)\s\.]+$/)
      raise "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
    end

    begin
      # –ò—Å–ø–æ–ª—å–∑—É–µ–º eval —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      result = eval(expression)
      "–†–µ–∑—É–ª—å—Ç–∞—Ç: #{expression} = #{result}"
    rescue ZeroDivisionError
      "–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"
    rescue => e
      "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: #{e.message}"
    end
  end

  def search_web(query, num_results = 5)
    # –°–∏–º—É–ª—è—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
    mock_results = [
      { title: "–†–µ–∑—É–ª—å—Ç–∞—Ç 1: #{query}", url: "https://example.com/1", snippet: "–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞..." },
      { title: "–†–µ–∑—É–ª—å—Ç–∞—Ç 2: #{query}", url: "https://example.com/2", snippet: "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞..." },
      { title: "–†–µ–∑—É–ª—å—Ç–∞—Ç 3: #{query}", url: "https://example.com/3", snippet: "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞..." },
      { title: "–†–µ–∑—É–ª—å—Ç–∞—Ç 4: #{query}", url: "https://example.com/4", snippet: "–û–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞..." },
      { title: "–†–µ–∑—É–ª—å—Ç–∞—Ç 5: #{query}", url: "https://example.com/5", snippet: "–û–ø–∏—Å–∞–Ω–∏–µ –ø—è—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞..." }
    ]

    results = mock_results.first(num_results)
    formatted_results = results.map.with_index do |result, index|
      "#{index + 1}. #{result[:title]}\n   #{result[:snippet]}\n   #{result[:url]}"
    end

    "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '#{query}':\n\n#{formatted_results.join("\n\n")}"
  end

  def get_current_time(city = nil, timezone = nil)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    now = Time.now

    # –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    timezones = {
      '–ú–æ—Å–∫–≤–∞' => 'Europe/Moscow',
      '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' => 'Europe/Moscow',
      'New York' => 'America/New_York',
      'London' => 'Europe/London',
      'Tokyo' => 'Asia/Tokyo',
      'Paris' => 'Europe/Paris',
      'Berlin' => 'Europe/Berlin'
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    tz = timezone || timezones[city] || 'UTC'

    begin
      # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–∞–±–æ—Ç–∞ —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
      city_name = city || tz
      "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ #{city_name}: #{now.strftime('%H:%M:%S')} (#{now.strftime('%d.%m.%Y')})"
    rescue => e
      "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è #{city_name}: #{e.message}"
    end
  end

  def translate_text(text, from_lang = nil, to_lang)
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –≤—ã–∑–æ–≤)
    translations = {
      'ru' => {
        'en' => {
          '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!' => 'Hello, world!',
          '–ö–∞–∫ –¥–µ–ª–∞?' => 'How are you?',
          '–°–ø–∞—Å–∏–±–æ' => 'Thank you',
          '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ' => 'Good morning'
        }
      },
      'en' => {
        'ru' => {
          'Hello, world!' => '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!',
          'How are you?' => '–ö–∞–∫ –¥–µ–ª–∞?',
          'Thank you' => '–°–ø–∞—Å–∏–±–æ',
          'Good morning' => '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ'
        }
      }
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if from_lang.nil?
      from_lang = text.match(/[–∞-—è]/i) ? 'ru' : 'en'
    end

    # –ò—â–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
    translation = translations.dig(from_lang, to_lang, text)

    if translation
      "–ü–µ—Ä–µ–≤–æ–¥ —Å #{from_lang} –Ω–∞ #{to_lang}:\n\n–û—Ä–∏–≥–∏–Ω–∞–ª: #{text}\n–ü–µ—Ä–µ–≤–æ–¥: #{translation}"
    else
      "–ü–µ—Ä–µ–≤–æ–¥ —Å #{from_lang} –Ω–∞ #{to_lang}:\n\n–û—Ä–∏–≥–∏–Ω–∞–ª: #{text}\n–ü–µ—Ä–µ–≤–æ–¥: [–°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞] #{text} (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ #{to_lang})"
    end
  end

  def show_help
    puts <<~HELP
      üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:**

      –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
      ‚Ä¢ get_weather - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞
      ‚Ä¢ calculate - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
      ‚Ä¢ search_web - –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
      ‚Ä¢ get_current_time - –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞
      ‚Ä¢ translate_text - –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞

      –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
      ‚Ä¢ "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?"
      ‚Ä¢ "–ü–æ—Å—á–∏—Ç–∞–π 15 * 8 + 32"
      ‚Ä¢ "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Ruby –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏"
      ‚Ä¢ "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å –≤ –¢–æ–∫–∏–æ?"
      ‚Ä¢ "–ü–µ—Ä–µ–≤–µ–¥–∏ 'Hello world' –Ω–∞ —Ä—É—Å—Å–∫–∏–π"

      –ö–æ–º–∞–Ω–¥—ã:
      /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
      /tools - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      /exit - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    HELP
  end

  def show_available_tools
    puts "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:"
    @tools.each do |tool|
      puts "\nüìã #{tool[:name]}"
      puts "   #{tool[:description]}"
      if tool[:parameters][:properties]
        tool[:parameters][:properties].each do |param_name, param_info|
          required = tool[:parameters][:required]&.include?(param_name) ? " (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" : " (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
          puts "   ‚Ä¢ #{param_name}: #{param_info[:description]}#{required}"
        end
      end
    end
    puts
  end
end

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
class ToolCallScenarios
  def self.run_all_scenarios
    puts "üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ Ruby LLM"
    puts "=" * 60

    configure_llm

    demonstrate_weather_tool
    demonstrate_calculation_tool
    demonstrate_multi_tool_usage
  end

  private

  def self.configure_llm
    RubyLLM.configure do |config|
      config.openai_api_key = ENV['OPENAI_API_KEY']
      config.anthropic_api_key = ENV['ANTHROPIC_API_KEY']
      config.default_model = 'gpt-4'
    end
  end

  def self.demonstrate_weather_tool
    puts "\nüå§Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã"
    puts "-" * 30

    tools = [
      {
        name: 'get_weather',
        description: '–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞',
        parameters: {
          type: 'object',
          properties: {
            city: { type: 'string', description: '–ì–æ—Ä–æ–¥' },
            units: { type: 'string', enum: ['celsius', 'fahrenheit'] }
          },
          required: ['city']
        }
      }
    ]

    chat = RubyLLM.chat.new(
      model: 'gpt-4',
      system: "–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç get_weather –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–≥–æ–¥–µ.",
      tools: tools
    )

    # –≠–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    def chat.execute_tool_call(tool_call)
      if tool_call.name == 'get_weather'
        args = JSON.parse(tool_call.arguments)
        city = args['city']
        "–í #{city} —Å–µ–π—á–∞—Å +18¬∞C, —Å–æ–ª–Ω–µ—á–Ω–æ, –≤–ª–∞–∂–Ω–æ—Å—Ç—å 65%."
      end
    end

    prompt = "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ü–∞—Ä–∏–∂–µ?"

    print "ü§î –ó–∞–ø—Ä–æ—Å: #{prompt}\n"
    response = chat.say(prompt)

    if response.tool_calls.any?
      puts "üîß –ú–æ–¥–µ–ª—å –≤—ã–∑–≤–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: #{response.tool_calls.first.name}"

      # –≠–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      result = chat.execute_tool_call(response.tool_calls.first)
      final_response = chat.say(
        tool_result: {
          tool_call_id: response.tool_calls.first.id,
          result: result
        }
      )

      print "ü§ñ –û—Ç–≤–µ—Ç: #{final_response.content}\n"
    else
      print "ü§ñ –û—Ç–≤–µ—Ç: #{response.content}\n"
    end
  end

  def self.demonstrate_calculation_tool
    puts "\nüßÆ –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
    puts "-" * 30

    tools = [
      {
        name: 'calculate',
        description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
        parameters: {
          type: 'object',
          properties: {
            expression: { type: 'string', description: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ' }
          },
          required: ['expression']
        }
      }
    ]

    chat = RubyLLM.chat.new(
      model: 'gpt-4',
      system: "–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç calculate –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.",
      tools: tools
    )

    # –≠–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    def chat.execute_tool_call(tool_call)
      if tool_call.name == 'calculate'
        args = JSON.parse(tool_call.arguments)
        expression = args['expression']
        result = eval(expression)
        "–†–µ–∑—É–ª—å—Ç–∞—Ç: #{expression} = #{result}"
      end
    end

    prompt = "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç (25 * 4) + 17?"

    print "ü§î –ó–∞–ø—Ä–æ—Å: #{prompt}\n"
    response = chat.say(prompt)

    if response.tool_calls.any?
      puts "üîß –ú–æ–¥–µ–ª—å –≤—ã–∑–≤–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: #{response.tool_calls.first.name}"

      result = chat.execute_tool_call(response.tool_calls.first)
      final_response = chat.say(
        tool_result: {
          tool_call_id: response.tool_calls.first.id,
          result: result
        }
      )

      print "ü§ñ –û—Ç–≤–µ—Ç: #{final_response.content}\n"
    else
      print "ü§ñ –û—Ç–≤–µ—Ç: #{response.content}\n"
    end
  end

  def self.demonstrate_multi_tool_usage
    puts "\nüîß –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
    puts "-" * 30

    tools = [
      {
        name: 'get_weather',
        description: '–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞',
        parameters: {
          type: 'object',
          properties: {
            city: { type: 'string', description: '–ì–æ—Ä–æ–¥' }
          },
          required: ['city']
        }
      },
      {
        name: 'calculate',
        description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
        parameters: {
          type: 'object',
          properties: {
            expression: { type: 'string', description: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ' }
          },
          required: ['expression']
        }
      }
    ]

    chat = RubyLLM.chat.new(
      model: 'gpt-4',
      system: "–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.",
      tools: tools
    )

    # –≠–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    def chat.execute_tool_call(tool_call)
      case tool_call.name
      when 'get_weather'
        args = JSON.parse(tool_call.arguments)
        "–í #{args['city']} +22¬∞C, –æ–±–ª–∞—á–Ω–æ."
      when 'calculate'
        args = JSON.parse(tool_call.arguments)
        result = eval(args['expression'])
        "–†–µ–∑—É–ª—å—Ç–∞—Ç: #{args['expression']} = #{result}"
      end
    end

    prompt = "–ü–æ—Å–º–æ—Ç—Ä–∏ –ø–æ–≥–æ–¥—É –≤ –õ–æ–Ω–¥–æ–Ω–µ –∏ –ø–æ—Å—á–∏—Ç–∞–π —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É 25 –∏ 7 –≥—Ä–∞–¥—É—Å–∞–º–∏"

    print "ü§î –ó–∞–ø—Ä–æ—Å: #{prompt}\n"
    response = chat.say(prompt)

    if response.tool_calls.any?
      puts "üîß –ú–æ–¥–µ–ª—å –≤—ã–∑–≤–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:"
      response.tool_calls.each { |tc| puts "   ‚Ä¢ #{tc.name}" }

      # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      response.tool_calls.each do |tool_call|
        result = chat.execute_tool_call(tool_call)
        chat.say(
          tool_result: {
            tool_call_id: tool_call.id,
            result: result
          }
        )
      end

      # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      final_response = chat.say("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–∞–π –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
      print "ü§ñ –û—Ç–≤–µ—Ç: #{final_response.content}\n"
    else
      print "ü§ñ –û—Ç–≤–µ—Ç: #{response.content}\n"
    end
  end
end

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if __FILE__ == $0
  if ARGV.include?('--demo')
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    ToolCallScenarios.run_all_scenarios
  else
    # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    bot = ToolCallingBot.new
    bot.start
  end
end