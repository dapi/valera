# frozen_string_literal: true
class BookingTool < RubyLLM::Tool
  description "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞—è–≤–∫–æ–π –Ω–∞ —É—Å–ª—É–≥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —á–∞—Ç"

  param :message_text, desc: "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
  param :name, desc: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", required: false
  param :conversation_context, desc: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)", required: false
  param :car_info, desc: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –∫–ª–∞—Å—Å, –ø—Ä–æ–±–µ–≥)", required: false
  param :required_services, desc: "–ü–µ—Ä–µ—á–µ–Ω—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–±–æ—Ç", required: false
  param :cost_calculation, desc: "–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥", required: false
  param :dialog_context, desc: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏", required: false
  param :total_cost_to_user, desc: "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞–∑–≤–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥", required: false
  param :conversation_summary, desc: "–ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º", required: false

  def initialize
    @enriched_data = {}
    @user_data = {}
  end

  # –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–≤–Ω–µ
  def enrich_with(car_info:, required_services:, cost_calculation:, dialog_context:, total_cost_to_user: nil, conversation_summary: nil)
    @enriched_data = {
      car_info: car_info,
      required_services: required_services,
      cost_calculation: cost_calculation,
      dialog_context: dialog_context,
      total_cost_to_user: total_cost_to_user,
      conversation_summary: conversation_summary
    }
    Application.instance.logger.debug "RequestDetector enriched with data: #{@enriched_data.keys}"
  end

  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  def enriched_data
    @enriched_data
  end

  def execute(message_text:, name: nil, conversation_context: nil,
              car_info: nil, required_services: nil, cost_calculation: nil, dialog_context: nil,
              total_cost_to_user: nil, conversation_summary: nil)

    begin
      Application.instance.logger.info "Request detected: #{message_text[0..50]}..."
      Application.instance.logger.debug "Request data - name: #{name}"

      # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      admin_chat_id = AppConfig.admin_chat_id
      unless admin_chat_id
        Application.instance.logger.error "Admin chat ID not configured"
        return { error: "–°–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" }
      end

      # LLM —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª(–∞), —á—Ç–æ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É, –ø–æ—ç—Ç–æ–º—É —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
      Application.instance.logger.info "Processing service request - confirmed by LLM"

      # –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      final_car_info = @enriched_data[:car_info] || car_info
      final_required_services = @enriched_data[:required_services] || required_services
      final_cost_calculation = @enriched_data[:cost_calculation] || cost_calculation
      final_dialog_context = @enriched_data[:dialog_context] || dialog_context

      # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      unless message_text && !message_text.strip.empty?
        Application.instance.logger.error "Empty message_text"
        return { error: "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è" }
      end

      # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏
      request_info = {
        confidence: 1.0, # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —Ç.–∫. –≤—ã–∑–≤–∞–Ω–æ LLM
        original_text: message_text || '',
        car_info: final_car_info || {},
        required_services: final_required_services || [],
        cost_calculation: final_cost_calculation || {},
        dialog_context: final_dialog_context || ''
      }

      result = send_to_admin_chat(request_info, nil, name, admin_chat_id)

      if result[:success]
        return "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
      else
        Application.instance.logger.error "Admin notification failed: #{result[:error]}"
        return { error: result[:error] }
      end

    rescue StandardError => e
      Application.instance.logger.error "‚ùå REQUEST ERROR: #{e.class}: #{e.message}"
      Application.instance.logger.error "Full backtrace:"
      e.backtrace&.each { |line| Application.instance.logger.error "  #{line}" }
      { error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: #{e.message}" }
    end
  end

  private

  def send_to_admin_chat(request_info, username, name, admin_chat_id)
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
    notification = format_admin_notification_safe(request_info, username, name)

    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ Markdown
    notification = sanitize_markdown(notification)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    bot = Telegram::Bot::Client.new(bot_token)

    bot.api.send_message(
      chat_id: admin_chat_id,
      text: notification.presence || '–û—à–∏–±–∫–∞! –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      parse_mode: 'Markdown'
    )

    Application.instance.logger.info "Request notification sent to admin chat #{admin_chat_id}"
    { success: true }
  rescue Telegram::Bot::Exceptions::ResponseError => e
    log_telegram_api_error(e, request_info, username, name)
    { error: "–û—à–∏–±–∫–∞ API Telegram: #{e.message}" }
  rescue Telegram::Bot::Exceptions::Base => e
    Application.instance.logger.error "Telegram bot error: #{e.class}: #{e.message}"
    { error: "–û—à–∏–±–∫–∞ –±–æ—Ç–∞ Telegram: #{e.message}" }
  rescue Net::TimeoutError, Net::OpenTimeout => e
    Application.instance.logger.error "Network timeout sending admin notification: #{e.message}"
    { error: "–¢–∞–π–º–∞—É—Ç —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" }
  rescue StandardError => e
    Application.instance.logger.error "‚ùå REQUEST ERROR: Unexpected error sending admin notification: #{e.class}: #{e.message}"
    Application.instance.logger.error "Full backtrace:"
    e.backtrace&.each { |line| Application.instance.logger.error "  #{line}" }
    { error: "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: #{e.message}" }
  end

  def format_admin_notification(request_info, username, name)
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    notification = format_basic_info(request_info, username, name)

    # –û–±–æ–≥–∞—â–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    notification += format_car_info(request_info[:car_info])
    notification += format_required_services(request_info[:required_services])
    notification += format_total_cost_to_user
    notification += format_conversation_summary
    notification += format_dialog_context(request_info[:dialog_context])
    notification += format_action_buttons

    notification
  end

  def format_admin_notification_safe(request_info, username, name)
    begin
      notification = ""

      # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –∑–∞—â–∏—Ç–æ–π
      notification += format_basic_info_safe(request_info, username, name)

      # –û–±–æ–≥–∞—â–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –∑–∞—â–∏—Ç–æ–π
      notification += format_car_info_safe(request_info[:car_info])
      notification += format_required_services_safe(request_info[:required_services])
      notification += format_total_cost_to_user_safe
      notification += format_conversation_summary_safe
      notification += format_dialog_context_safe(request_info[:dialog_context])
      notification += format_action_buttons_safe

      notification
    rescue StandardError => e
      Application.instance.logger.error "Error formatting admin notification: #{e.message}"
      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      basic_name = name.to_s.strip.empty? ? "–ö–ª–∏–µ–Ω—Ç" : name.to_s.strip
      "üîî **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê**\n\nüë§ **–ö–ª–∏–µ–Ω—Ç:** #{basic_name}\n\nüí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n```\n#{request_info[:original_text].to_s.strip[0..200]}\n```\n\n‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*"
    end
  end

  def format_basic_info(request_info, username, name)
    user_display = name || "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    notification = "üîî **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê**\n\n"
    notification += "üë§ **–ö–ª–∏–µ–Ω—Ç:** #{user_display}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if name
      notification += "üìù **–ò–º—è:** #{name}\n"
    end

    notification += "\n"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    if request_info[:matched_patterns] && !request_info[:matched_patterns].empty?
      notification += "üîç **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:**\n"
      Array(request_info[:matched_patterns]).first(3).each do |pattern|
        # Ensure pattern is a string before splitting
        pattern_str = pattern.to_s
        type, pattern_text = pattern_str.split(':', 2)
        notification += "‚Ä¢ #{type}: `#{pattern_text}`\n"
      end
      notification += "\n"
    end

    notification += "üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n"
    notification += "```\n#{request_info[:original_text]}\n```\n\n"

    notification
  end

  def format_car_info(car_info)
    return "" unless car_info && !car_info.empty?

    info = "\nüöó **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:**\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    has_data = false

    if car_info[:make_model]
      info += "‚Ä¢ **–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å:** #{car_info[:make_model]}\n"
      has_data = true
    end

    if car_info[:year]
      info += "‚Ä¢ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** #{car_info[:year]}\n"
      has_data = true
    end

    if car_info[:class]
      class_desc = car_info[:class_description] || car_info[:class]
      info += "‚Ä¢ **–ö–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** #{class_desc}\n"
      has_data = true
    else
      info += "‚Ä¢ **–ö–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ\n"
      has_data = true
    end

    if car_info[:mileage]
      info += "‚Ä¢ **–ü—Ä–æ–±–µ–≥:** #{car_info[:mileage]}\n"
      has_data = true
    end

    info += "\n" if has_data
    info
  end

  def format_required_services(services)
    return "" unless services && !services.empty?

    info = "\nüîß **–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–±–æ—Ç—ã:**\n"
    Array(services).each_with_index do |service, index|
      # Ensure service is convertible to string
      service_str = service.to_s
      info += "#{index + 1}. #{service_str}\n"
    end
    info += "\n"
  end

  def format_cost_calculation(cost_data)
    return "" unless cost_data && !cost_data.empty?

    info = "\nüí∞ **–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**\n"
    has_data = false

    if cost_data[:services] && !cost_data[:services].empty?
      Array(cost_data[:services]).each do |service|
        # Ensure service is a hash with expected keys
        if service.is_a?(Hash)
          service_name = service[:name] || service['name'] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞'
          service_price = service[:price] || service['price'] || '–ø–æ –∑–∞–ø—Ä–æ—Å—É'
          info += "‚Ä¢ #{service_name}: #{service_price}\n"
        else
          info += "‚Ä¢ #{service.to_s}\n"
        end
      end
      has_data = true
    end

    if cost_data[:total]
      info += "‚Ä¢ **–ò—Ç–æ–≥–æ –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** #{cost_data[:total]}\n"
      has_data = true
    end

    note = cost_data[:note] || '–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'
    info += "‚Ä¢ *#{note}*\n"
    has_data = true

    info += "\n" if has_data
    info
  end

  def format_dialog_context(context)
    return "" unless context && !context.to_s.strip.empty?

    info = "\nüí¨ **–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:**\n"
    info += "#{context}\n\n"
    info
  end

  def format_total_cost_to_user
    total_cost = @enriched_data[:total_cost_to_user]
    return "" unless total_cost && !total_cost.to_s.strip.empty?

    info = "\nüí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–Ω–∞—è –∫–ª–∏–µ–Ω—Ç—É:**\n"
    info += "‚Ä¢ **#{total_cost}**\n"
    info += "‚Ä¢ *–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏*\n\n"
    info
  end

  def format_conversation_summary
    summary = @enriched_data[:conversation_summary]
    return "" unless summary && !summary.to_s.strip.empty?

    info = "\nüìù **–í—ã–∂–∏–º–∫–∞ –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏:**\n"
    info += "#{summary}\n\n"
    info
  end

  def format_action_buttons(user_id = nil)
    "" # "\nüîó **–î–µ–π—Å—Ç–≤–∏—è:**\n/answer_#{user_id} - –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É\n/close_#{user_id} - –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É\n"
  end

  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –º–µ—Ç–æ–¥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—É—Ä–æ–≤–µ–Ω—å C –∑–∞—â–∏—Ç—ã)

  def format_basic_info_safe(request_info, username, name)
    begin
      user_display = name.to_s.strip.empty? ? "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" : name.to_s.strip

      notification = "üîî **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê**\n\n"
      notification += "üë§ **–ö–ª–∏–µ–Ω—Ç:** #{user_display}\n"

      # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if name && !name.to_s.strip.empty?
        notification += "üìù **–ò–º—è:** #{name}\n"
      end

      notification += "\n"

      # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (—Å –∑–∞—â–∏—Ç–æ–π)
      if request_info[:matched_patterns] && !request_info[:matched_patterns].empty?
        notification += "üîç **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:**\n"
        patterns = Array(request_info[:matched_patterns]).first(3)
        patterns.each do |pattern|
          pattern_str = pattern.to_s
          type, pattern_text = pattern_str.split(':', 2)
          notification += "‚Ä¢ #{type}: `#{pattern_text}`\n"
        end
        notification += "\n"
      end

      # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è original_text
      original_text = request_info[:original_text].to_s.strip
      original_text = "[—Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç]" if original_text.empty?

      notification += "üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n"
      notification += "```\n#{original_text}\n```\n\n"

      notification
    rescue StandardError => e
      Application.instance.logger.error "Error in format_basic_info_safe: #{e.message}"
      "üîî **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê**\n\nüë§ **–ö–ª–∏–µ–Ω—Ç:** [–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]\n\nüí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** [–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å]\n\n"
    end
  end

  def format_car_info_safe(car_info)
    return "" unless car_info && !car_info.to_s.strip.empty? && car_info.respond_to?(:empty?)

    begin
      info = "\nüöó **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:**\n"
      has_data = false

      if car_info[:make_model]
        info += "‚Ä¢ **–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å:** #{car_info[:make_model]}\n"
        has_data = true
      end

      if car_info[:year]
        info += "‚Ä¢ **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** #{car_info[:year]}\n"
        has_data = true
      end

      if car_info[:car_class]
        class_desc = car_info[:class_description] || car_info[:car_class]
        info += "‚Ä¢ **–ö–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** #{class_desc}\n"
        has_data = true
      else
        info += "‚Ä¢ **–ö–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:** —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ\n"
        has_data = true
      end

      if car_info[:mileage]
        info += "‚Ä¢ **–ü—Ä–æ–±–µ–≥:** #{car_info[:mileage]}\n"
        has_data = true
      end

      info += "\n" if has_data
      info
    rescue StandardError => e
      Application.instance.logger.error "Error in format_car_info_safe: #{e.message}"
      "\nüöó **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:** [–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]\n\n"
    end
  end

  def format_required_services_safe(services)
    return "" unless services && !services.to_s.strip.empty?

    begin
      info = "\nüîß **–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–±–æ—Ç—ã:**\n"
      Array(services).each_with_index do |service, index|
        service_str = service.to_s.strip
        next if service_str.empty?
        info += "#{index + 1}. #{service_str}\n"
      end
      info += "\n"
      info
    rescue StandardError => e
      Application.instance.logger.error "Error in format_required_services_safe: #{e.message}"
      "\nüîß **–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–±–æ—Ç—ã:** [–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]\n\n"
    end
  end

  def format_total_cost_to_user_safe
    total_cost = @enriched_data[:total_cost_to_user]
    return "" unless total_cost && !total_cost.to_s.strip.empty?

    begin
      info = "\nüí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–Ω–∞—è –∫–ª–∏–µ–Ω—Ç—É:**\n"
      info += "‚Ä¢ **#{total_cost}**\n"
      info += "‚Ä¢ *–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏*\n\n"
      info
    rescue StandardError => e
      Application.instance.logger.error "Error in format_total_cost_to_user_safe: #{e.message}"
      "\nüí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–Ω–∞—è –∫–ª–∏–µ–Ω—Ç—É:** [–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]\n\n"
    end
  end

  def format_conversation_summary_safe
    summary = @enriched_data[:conversation_summary]
    return "" unless summary && !summary.to_s.strip.empty?

    begin
      info = "\nüìù **–í—ã–∂–∏–º–∫–∞ –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏:**\n"
      info += "#{summary}\n\n"
      info
    rescue StandardError => e
      Application.instance.logger.error "Error in format_conversation_summary_safe: #{e.message}"
      "\nüìù **–í—ã–∂–∏–º–∫–∞ –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏:** [–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]\n\n"
    end
  end

  def format_dialog_context_safe(context)
    return "" unless context && !context.to_s.strip.empty?

    begin
      info = "\nüí¨ **–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:**\n"
      info += "#{context}\n\n"
      info
    rescue StandardError => e
      Application.instance.logger.error "Error in format_dialog_context_safe: #{e.message}"
      "\nüí¨ **–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:** [–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]\n\n"
    end
  end

  def format_action_buttons_safe
    begin
      "" # "\nüîó **–î–µ–π—Å—Ç–≤–∏—è:**\n/answer_#{user_id} - –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É\n/close_#{user_id} - –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É\n"
    rescue StandardError => e
      Application.instance.logger.error "Error in format_action_buttons_safe: #{e.message}"
      ""
    end
  end

  def sanitize_markdown(text)
    return text unless text && !text.empty?

    begin
      # –ò—Å–ø–æ–ª—å–∑—É–µ–º CommonMarker –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Markdown
      Application.instance.logger.debug "üîç SANITIZING MARKDOWN: Input length #{text.length} chars"

      # –ü–∞—Ä—Å–∏–º –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º —á–µ—Ä–µ–∑ CommonMarker –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      doc = Commonmarker.parse(text)
      sanitized = doc.to_commonmark

      # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è Telegram API
      sanitized = sanitize_for_telegram(sanitized)

      Application.instance.logger.debug "üîç SANITIZED MARKDOWN: Output length #{sanitized.length} chars"
      sanitized

    rescue StandardError => e
      Application.instance.logger.error "Commonmarker sanitization failed: #{e.message}, using fallback"
      # Fallback –∫ –±–∞–∑–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–µ
      sanitize_for_telegram(text)
    end
  end

  def sanitize_for_telegram(text)
    return text unless text && !text.empty?

    sanitized = text.dup

    # –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å Telegram API
    sanitized.gsub!(/[\u0000-\u001F\u007F-\u009F]/, '')   # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    sanitized.gsub!(/[\u2028\u2029]/, ' ')                # Line separator –∏ paragraph separator
    sanitized.gsub!(/[\uFFFE\uFFFF]/, '')                 # Invalid Unicode

    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    sanitized.rstrip!

    sanitized
  rescue StandardError => e
    Application.instance.logger.error "Error in telegram sanitization: #{e.message}"
    text
  end

  def log_telegram_api_error(error, request_info, username, name)
    # –î–µ—Ç–∞–ª—å–Ω–æ–µ trace –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ Telegram API
    Application.instance.logger.error "üîç TELEGRAM API ERROR TRACE:"
    Application.instance.logger.error "  Error: #{error.message}"
    Application.instance.logger.error "  Error code: #{error.instance_variable_get(:@error_code) if error.instance_variable_defined?(:@error_code)}"
    Application.instance.logger.error "  Description: #{error.instance_variable_get(:@description) if error.instance_variable_defined?(:@description)}"

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤–∞ –∏–∑ —Å—Ç–µ–∫–∞
    Application.instance.logger.error "  Call stack:"
    caller_locations(0, 5).each do |loc|
      Application.instance.logger.error "    #{loc.path}:#{loc.lineno} in #{loc.label}"
    end

    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown, –ª–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    if error.message.include?("can't parse entities")
      notification = format_admin_notification_safe(request_info, username, name)
      Application.instance.logger.error "  Failed text length: #{notification&.bytesize} bytes"
      Application.instance.logger.error "  Failed text preview (first 500 chars):"
      Application.instance.logger.error "    #{notification&.truncate(500).inspect}"

      # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ä–∞–π–æ–Ω–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ offset
      if match = error.message.match(/byte offset (\d+)/)
        offset = match[1].to_i
        Application.instance.logger.error "  Problem area around byte offset #{offset}:"
        notification&.chars.each_with_index do |char, i|
          if i >= [offset - 50, 0].max && i <= offset + 50
            byte_pos = notification.byteslice(0, i).bytesize
            indicator = (byte_pos == offset) ? "üëâ" : "  "
            Application.instance.logger.error "    #{indicator} [#{i}] #{char.inspect} (byte pos: #{byte_pos})"
          end
        end
      end
    end
  end
end
