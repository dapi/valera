# frozen_string_literal: true

# Job –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π —á–∞—Ç
class BookingNotificationJob < ApplicationJob
  queue_as :default

  retry_on StandardError, wait: :exponentially_longer, attempts: 3

  def perform(booking)
    return unless ApplicationConfig.admin_chat_id.present?

    send_notification_to_managers(booking)
  rescue => e
    Rails.logger.error "BookingNotificationJob failed for booking #{booking.id}: #{e.message}"
    Bugsnag.notify(e)
    raise
  end

  private

  def send_notification_to_managers(booking)
    message = format_manager_notification(booking)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π —á–∞—Ç
    Telegram.bot.send_message(
      chat_id: ApplicationConfig.admin_chat_id,
      text: message,
      parse_mode: 'HTML'
    )
  end

  def format_manager_notification(booking)
    <<~MESSAGE
      üöó <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –û–°–ú–û–¢–†</b>

      üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> #{booking.customer_name}
      üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> #{booking.customer_phone}

      üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> #{format_car_info(booking.car_info)}
      ‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> #{format_preferred_time(booking)}

      üìù <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:</b>
      #{extract_dialogue_context(booking)}

      üîó <b>ID –∑–∞—è–≤–∫–∏:</b> ##{booking.id}
    MESSAGE
  end

  def format_car_info(car_info)
    return "–ù–µ —É–∫–∞–∑–∞–Ω–æ" unless car_info.is_a?(Hash)

    brand = car_info['brand'] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    model = car_info['model'] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    year = car_info['year'] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    "#{brand} #{model}, #{year}"
  end

  def format_preferred_time(booking)
    date = booking.preferred_date || "–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ"
    time = booking.preferred_time || "–õ—é–±–æ–µ –≤—Ä–µ–º—è"

    "#{date} –≤ #{time}"
  end

  def extract_dialogue_context(booking)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    return "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" unless booking.chat

    messages = booking.chat.messages.order(:created_at).last(5)
    return "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π" if messages.empty?

    context = messages.map do |msg|
      sender = msg.role == 'user' ? '–ö–ª–∏–µ–Ω—Ç' : '–ë–æ—Ç'
      "#{sender}: #{msg.content.truncate(100)}"
    end.join("\n")

    context.truncate(300)
  end
end
