#!/usr/bin/env ruby

# –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ gems
# Usage: bin/docs [gem] [section] [topic]

require 'pathname'

class DocsCLI
  DOCS_ROOT = Pathname.new(__dir__).join('..', 'docs', 'gems')
  AVAILABLE_GEMS = %w[telegram-bot ruby_llm].freeze
  AVAILABLE_SECTIONS = %w[readme api-reference patterns examples].freeze

  def initialize(args)
    @args = args
  end

  def run
    case @args[0]
    when nil, 'help', '--help', '-h'
      show_help
    when 'list'
      list_available_docs
    when 'search'
      search_docs(@args[1])
    else
      open_doc
    end
  end

  private

  def show_help
    puts <<~HELP
      üìö Valera Gems Documentation Tool

      Usage:
        bin docs [gem] [section] [topic]

      Examples:
        bin docs                                    # Show this help
        bin docs list                              # List all available documentation
        bin docs telegram-bot                     # Open telegram-bot main docs
        bin docs ruby_llm                         # Open ruby_llm main docs
        bin docs telegram-bot api                 # Open telegram-bot API reference
        bin docs ruby_llm examples                # List ruby_llm examples
        bin docs ruby_llm patterns                # Open ruby_llm patterns
        bin docs search "function calling"       # Search across all docs

      Available gems:
        telegram-bot - Telegram bot gem documentation
        ruby_llm     - Ruby LLM gem documentation

      Available sections:
        readme        - Main documentation (README.md)
        api-reference - API reference documentation
        patterns      - Architecture patterns
        examples      - Code examples

      Examples location:
        - telegram-bot: ./docs/gems/telegram-bot/examples/
        - ruby_llm: ./docs/gems/ruby_llm/examples/

      Quick access:
        bin docs telegram-bot examples basic-bot     # Open basic bot example
        bin docs ruby_llm examples basic-chat         # Open basic chat example
        bin docs ruby_llm examples tool-calls         # Open tool calls example
        bin docs ruby_llm examples configuration      # Open configuration example
    HELP
  end

  def list_available_docs
    puts "üìö Available Documentation:"
    puts

    AVAILABLE_GEMS.each do |gem|
      gem_path = DOCS_ROOT.join(gem)
      next unless gem_path.directory?

      puts "üî∑ #{gem}:"
      list_gem_docs(gem_path)
      puts
    end
  end

  def list_gem_docs(gem_path)
    # Main files
    main_files = %w[README.md api-reference.md patterns.md]
    main_files.each do |file|
      full_path = gem_path.join(file)
      if full_path.file?
        puts "  üìÑ #{file.gsub('.md', '')} - #{get_file_description(file)}"
      end
    end

    # Examples
    examples_path = gem_path.join('examples')
    if examples_path.directory?
      puts "  üìÅ examples/ - Code examples"
      examples_path.glob('*.rb').each do |example|
        puts "    üìÑ #{example.basename('.rb')} - #{get_example_description(example.basename)}"
      end
    end
  end

  def get_file_description(filename)
    descriptions = {
      'README.md' => 'Main documentation and getting started',
      'api-reference.md' => 'Complete API reference',
      'patterns.md' => 'Architecture patterns and best practices'
    }
    descriptions[filename] || filename
  end

  def get_example_description(basename)
    descriptions = {
      'basic-bot' => 'Basic Telegram bot with command handling',
      'webhook-setup' => 'Telegram bot webhook setup for Rails',
      'advanced-handlers' => 'Advanced message handling with state management',
      'basic-chat' => 'Basic Ruby LLM chat implementation',
      'tool-calls' => 'Tool/function calling with Ruby LLM',
      'configuration' => 'Ruby LLM configuration examples'
    }
    descriptions[basename.to_s] || basename.to_s
  end

  def open_doc
    gem_name = @args[0]
    section = @args[1]&.gsub('.md', '')&.downcase
    topic = @args[2]

    unless AVAILABLE_GEMS.include?(gem_name)
      puts "‚ùå Unknown gem: #{gem_name}"
      puts "Available gems: #{AVAILABLE_GEMS.join(', ')}"
      exit 1
    end

    gem_path = DOCS_ROOT.join(gem_name)
    unless gem_path.directory?
      puts "‚ùå Documentation not found for gem: #{gem_name}"
      exit 1
    end

    case section
    when nil, 'readme', 'help'
      open_file(gem_path.join('README.md'))
    when 'api', 'api-reference'
      open_file(gem_path.join('api-reference.md'))
    when 'patterns'
      open_file(gem_path.join('patterns.md'))
    when 'examples', 'example'
      if topic
        open_example(gem_name, topic)
      else
        list_examples(gem_name)
      end
    else
      # Try to find by topic
      found = find_doc_by_topic(gem_path, section)
      if found
        open_file(found)
      else
        puts "‚ùå Section not found: #{section}"
        puts "Available sections: #{AVAILABLE_SECTIONS.join(', ')}"
        exit 1
      end
    end
  end

  def open_example(gem_name, example_name)
    examples_path = DOCS_ROOT.join(gem_name, 'examples')
    example_file = examples_path.join("#{example_name}.rb")

    if example_file.file?
      open_file(example_file)
    else
      puts "‚ùå Example not found: #{example_name}"
      list_examples(gem_name)
      exit 1
    end
  end

  def list_examples(gem_name)
    examples_path = DOCS_ROOT.join(gem_name, 'examples')
    unless examples_path.directory?
      puts "‚ùå No examples found for #{gem_name}"
      exit 1
    end

    puts "üìÅ Examples for #{gem_name}:"
    examples_path.glob('*.rb').each do |example|
      basename = example.basename('.rb')
      description = get_example_description(basename)
      puts "  üìÑ #{basename} - #{description}"
      puts "     Open with: bin docs #{gem_name} examples #{basename}"
    end
  end

  def find_doc_by_topic(gem_path, topic)
    # Try different file names
    candidates = [
      "#{topic}.md",
      "#{topic.gsub('-', '_')}.md",
      "#{topic.gsub('_', '-')}.md"
    ]

    candidates.each do |candidate|
      file = gem_path.join(candidate)
      return file if file.file?
    end

    nil
  end

  def open_file(file_path)
    unless file_path.file?
      puts "‚ùå File not found: #{file_path}"
      exit 1
    end

    # Try different editors based on availability
    editor = ENV['EDITOR'] || find_available_editor

    if editor
      system(editor, file_path.to_s)
    else
      # Fallback: display file content
      puts "üìÑ File: #{file_path.relative_path_from(Pathname.pwd)}"
      puts "=" * 50
      puts File.read(file_path)
    end
  end

  def find_available_editor
    editors = %w[code vim nano emacs]
    editors.find { |editor| system("which #{editor} > /dev/null 2>&1") }
  end

  def search_docs(query)
    return show_help unless query

    puts "üîç Searching for '#{query}' across all documentation..."
    puts

    found_any = false

    AVAILABLE_GEMS.each do |gem|
      gem_path = DOCS_ROOT.join(gem)
      next unless gem_path.directory?

      puts "üî∑ Searching in #{gem}:"

      # Search in main files
      main_files = gem_path.glob('*.md')
      main_files.each do |file|
        matches = search_in_file(file, query)
        if matches.any?
          found_any = true
          puts "  üìÑ #{file.basename}:"
          matches.each { |match| puts "    #{match}" }
        end
      end

      # Search in examples
      examples_path = gem_path.join('examples')
      if examples_path.directory?
        examples_path.glob('*.rb').each do |file|
          matches = search_in_file(file, query)
          if matches.any?
            found_any = true
            puts "  üìÑ examples/#{file.basename}:"
            matches.each { |match| puts "    #{match}" }
          end
        end
      end

      puts
    end

    unless found_any
      puts "‚ùå No matches found for '#{query}'"
    end
  end

  def search_in_file(file_path, query)
    matches = []
    lines = File.readlines(file_path)

    lines.each_with_index do |line, index|
      if line.downcase.include?(query.downcase)
        matches << "Line #{index + 1}: #{line.strip[0..100]}#{'...' if line.strip.length > 100}"
      end
    end

    matches
  end
end

# Run the CLI
DocsCLI.new(ARGV).run